#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# Detect requested channel or default to stable
if [ -f $ENV_DIR/GOOGLE_CHROME_CHANNEL ]; then
  channel=$(cat $ENV_DIR/GOOGLE_CHROME_CHANNEL)
else
  channel=stable
fi

# Setup bin and shim locations for desired channel, and detect invalid channels
case "$channel" in
  "stable")
    BIN=chrome/chrome
    SHIM=google-chrome-stable
    ;;
  "beta")
    BIN=chrome-beta/chrome
    SHIM=google-chrome-beta
    ;;
  "unstable")
    BIN=chrome-unstable/chrome
    SHIM=google-chrome-unstable
    ;;
  *)
    error "GOOGLE_CHROME_CHANNEL must be 'stable', 'beta', or 'unstable', not '$channel'."
    ;;
esac

stack=${STACK:-heroku-16}

# Install correct dependencies according to $STACK
case "$stack" in
  "cedar-14")
    APT_FLAGS="--force-yes"
    PACKAGES="libxss1"
    ;;
  "heroku-16" | "heroku-18" | "heroku-20")
    # the package list is found by using ci:debug then running ldd $GOOGLE_CHROME_BIN | grep not
    # also look here for more packages/notes https://developers.google.com/web/tools/puppeteer/troubleshooting
    APT_FLAGS="--allow-downgrades --allow-remove-essential --allow-change-held-packages"
    PACKAGES="
      gconf-service
      libappindicator1
      libasound2
      libatk1.0-0
      libatk-bridge2.0-0
      libcairo-gobject2
      libdrm2
      libgbm1
      libgconf-2-4
      libgtk-3-0
      libnspr4
      libnss3
      libx11-xcb1
      libxcb-dri3-0
      libxcomposite1
      libxcursor1
      libxdamage1
      libxfixes3
      libxi6
      libxinerama1
      libxrandr2
      libxss1
      libxtst6
      fonts-liberation
    "
    ;;
  *)
    error "STACK must be 'cedar-14', 'heroku-16', 'heroku-18' or 'heroku-20', not '$stack'."
esac

if [ ! -f $CACHE_DIR/PURGED_CACHE_V1 ]; then
  topic "Purging cache"
  rm -rf $CACHE_DIR/apt
  rm -rf $CACHE_DIR/archives
  rm -rf $CACHE_DIR/lists
  touch $CACHE_DIR/PURGED_CACHE_V1
fi

topic "Installing Google Chrome from the $channel channel."
if [ -f $ENV_DIR/CHROME_VERSION ]; then
  CHROME_VERSION=$(cat $ENV_DIR/CHROME_VERSION)
  CHROME_PACKAGE="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-${channel}/google-chrome-${channel}_$CHROME_VERSION-1_amd64.deb"
else
  CHROME_PACKAGE="https://dl.google.com/linux/direct/google-chrome-${channel}_current_amd64.deb"
fi

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

topic "Fetching .debs for Google Chrome dependencies"
apt-get $APT_OPTIONS -y $APT_FLAGS -d install --reinstall $PACKAGES | indent

topic "Fetching .deb for Google Chrome"
PACKAGE_NAME=$(basename $CHROME_PACKAGE .deb)
PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb
curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $CHROME_PACKAGE 2>&1 | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"

topic "Rewrite package-config files"
find $BUILD_DIR/.apt -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/.apt\1!g'

topic "Creating google-chrome shims"

BIN_DIR=$BUILD_DIR/.apt/usr/bin

rm $BIN_DIR/$SHIM
cat <<EOF >$BIN_DIR/$SHIM
#!/usr/bin/env bash
exec \$HOME/.apt/opt/google/$BIN --headless --no-sandbox --disable-gpu --remote-debugging-port=9222 "$@"
EOF
chmod +x $BIN_DIR/$SHIM
cp $BIN_DIR/$SHIM $BIN_DIR/google-chrome

# export the chrome binary location, so it's easier to tell chromedriver
# about the non-standard location
cat <<EOF >$BUILD_DIR/.profile.d/010_google-chrome.sh
export GOOGLE_CHROME_BIN="\$HOME/.apt/opt/google/$BIN"
export GOOGLE_CHROME_SHIM="\$HOME/.apt/usr/bin/$SHIM"
EOF
